@@grammar::Vensim2Stan
@@eol_comments :: /\/\/.*?$/
@@parseinfo :: False

start::Program = { statements+:statement }+ $;

statement::Statement = left:factor ~ op:('~' | '=') ~ right:expression ';';

expression =
    addition_expression
;

addition_expression =
    | addition
    | multiplication_expression
;

addition::Binary = left:multiplication_expression op:('+' | '-') ~ right:addition_expression;

multiplication_expression =
    | multiplication
    | factor
;

multiplication::Binary = left:factor op:('*' | '/') ~ right:multiplication_expression;

factor
    =
    | array
    | function_call
    | subexpression
    | variable
    | literal
;

function_call::FunctionCall = name:identifier '(' [ arglist:arglist ] ')';
variable::Variable = [ not_param:"@" ] name:identifier [ constraints:constraints ] [ '[' subscripts:subscript ']' ];
constraints::Constraints = '<' left:constraint ~ [',' right:constraint] '>';
constraint = name:('lower'|'upper') ~ '=' ~ value:literal;
arglist = @+:expression {',' ~ @+:expression}*;
subscript = @+:identifier {',' ~ @+:identifier}*;
subexpression = '(' ~ @:expression ')';

array::Array = '{' values:array_values '}';
array_values = @+:array_element {',' ~ @+:array_element}*;
array_element =
    | literal
    | array
;


literal::Literal = value:(real | integer);

integer::int = /[-]?\d+/;
real::float =
    | /[-]?[0-9]+\.[0-9]*e[-+]?[0-9]+/
    | /[-]?[0-9]+\.[0-9]*/
;
@name
identifier::str = /[a-zA-Z_][a-zA-Z0-9_]*/;